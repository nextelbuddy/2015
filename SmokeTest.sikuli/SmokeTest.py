#this is a script for the Timeslips 2 hour smoke test

#this script will pull data for importing a slip and client into timeslips
#make sure that your slip archive file and client export data are in C:\sikuli scripts\data
#otherwise the script will fail to get that information
#the name of these files are 'SmoketestSlipArchive' and 'SmokeTestClientExport'

#this script will pull an explore database in 2013 version to test cnoversion diaogs
#make sure this database is the C:\sikuli scripts\data folder named 'smoketestconversion'

from sikuli import*
import mySettings
import logging
import os
import subprocess
#import Alpha_Beta
import logging
reload(logging)
import datetime
import Installer
import CreateTSDB
import OpenTS_DB_Test
import CreateTimeSlipNew
import CreateExpenseSlipNew
import RestorePrefs
import ClearSlips
import SlipAssert
import CreateClient
import CreateTimekeeper
import CreateTask
import CreateExpense
import CreateReference
import CreateCustom
import CreateTransactions
import CreateBank
import CreateFundTrans
import DBSetup
import SlipsExpandedFunctionalityComplete
import DBChecks
import ImportClient
import ImportSlips
import TABFunction
import shutil
import 2014SR1DefectFixes
import Alerts
import SlipsList
import EmailTestResults
SCR0 = Screen(0)
SCR1 = Screen(1)
startTime = datetime.datetime.now()


# setup logging and folder paths
if not os.path.exists(r'C:\tssmoketest\Logs'):
    os.makedirs(r'C:\tssmoketest\Logs')

if not os.path.exists(r'C:\tssmoketest\Reports'):
    os.makedirs(r'C:\tssmoketest\Reports')

if not os.path.exists(r'C:\tssmoketest\Backups'):
    os.makedirs(r'C:\tssmoketest\Backups')

#--------------------------------------------------------#
  
logging.basicConfig(filename=os.path.join(r'C:\tssmoketest', 'Logs', startTime.strftime('SmokeTestLog %Y_%m_%d %H_%M_%S.log')), level=logging.DEBUG, format='%(message)s', filemode='w')
#logging.basicConfig(filename=os.path.join(r"C:\tssmoketest", 'Logs', "SmokeTestLog.log"), level=logging.DEBUG, format='%(message)s', filemode='w')
# Level = DEBUG, INFO, WARNING, ERROR, CRITICAL

#--------------------------------------------------------#

# stamp start time
logging.debug(' ')
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(startTime.strftime("Started at: %Y-%m-%d %H:%M:%S"))
logging.debug('- - - - - - - - - - - - - - -')




"""
#--------------------------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
    #first part of smoke test is deleting prior installation
logging.debug(' ')
logging.debug('Timeslips_Removal_Begin')
if os.path.exists(os.path.join(r'C:\tssmoketest', Settings.Version)):
    shutil.rmtree(os.path.join(r'C:\tssmoketest', Settings.Version))
logging.debug(' ')
logging.debug('Timeslips_Removal_End')
#--------------------------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
    #first part of smoke test is installation by calling the installer function
logging.debug(' ')
logging.debug('Timeslips_installer_Begin')


if Settings.InstallPhase == Settings.tInstallPhaseE[0]:
    Installer.alpha_beta_installer()
elif Settings.InstallType == Settings.tInstallTypesE[1]:
    Installer.single_installer()
elif Settings.InstallType == Settings.tInstallTypesE[0]:
    Installer.cd_installer()
      


    
logging.debug(' ')
logging.debug('Timeslips_installation_End')

"""


    
    #Smoke test begins with verifying all applications with in Timeslips application folder open. 
    #MiniTS, Navedit, ProcEdit, StatAdmin, Timeslips, TSImport, TSTimer
    #these are the app instances we are defining below

    
minits = App(os.path.join(r"C:\tssmoketest", Settings.Version, "MiniTS.exe"))
navedit = App(os.path.join(r"C:\tssmoketest", Settings.Version, "navedit.exe"))
procedit = App(os.path.join(r"C:\tssmoketest", Settings.Version, "procedit.exe"))
statadmn = App(os.path.join(r"C:\tssmoketest", Settings.Version, "statadmn.exe"))
timeslip = App(os.path.join(r"C:\tssmoketest", Settings.Version, "timeslip.exe"))
tsimport = App(os.path.join(r"C:\tssmoketest", Settings.Version, "tsimport.exe"))
tcapture = App(os.path.join(r"C:\tssmoketest", Settings.Version, "timecapture", "timecapture.exe"))

    #defining our directory to use in certain lines.
dir = os.path.join('c:', os.sep, 'tssmoketest', Settings.Version)

#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
    #creating our timeslips database to use for the smoketest
logging.debug(' ')
logging.debug('----Timeslips DB Creation Start')
CreateTSDB.create_ts_db()
logging.debug(' ')
logging.debug('----Timeslips DB Creation End')
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
    #in case prefs file is missing this will check and eat the error
DBChecks.checkFor_Preferror()

#----------------------------------------#
waitVanish(Pattern("ezEEQZESlewQ.png").similar(0.89))



    #Section below begins opening and closing all APPs installed by installer
#----------------------------------------#
logging.debug(' ')
logging.debug('----Open all installed TS Apps Begin')
logging.debug('------------------')
logging.debug('----Open Mini TS')
minits.open()
wait(Pattern("Therearenoav.png").similar(0.83), 160)
type(Key.ENTER)
wait(Pattern("liblHlP2LF1l.png").similar(0.81))

type(Key.SPACE, KeyModifier.ALT)
type("x")
type("w", KeyModifier.CTRL)
type("h", KeyModifier.ALT)
type("a")
wait("MiniTimeslip-1.png", 30)
assert exists("MiniTimeslip-1.png")
type("d")
minits.close()
waitVanish("EnteranExpen-1.png")
logging.debug(' ')
logging.debug('----Mini TS Launched and closed with out issue')
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Launch Navigation Editor')
navedit.open()
wait("QEIQIEQXI.png", 160)
type(Key.SPACE, KeyModifier.ALT)
type("x")
type("w", KeyModifier.CTRL)
type("h", KeyModifier.ALT)
type("a")
wait(2)
assert exists("NavigatorEdi.png")
type("d")
waitVanish("NavigatorEdi.png")
navedit.close()

waitVanish("QEIQIEQXI.png")
logging.debug(' ')
logging.debug('----Nav Editor launched and closed with out issue')
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Launch Procedure Editor')
procedit.open()
wait(Pattern("UseTimeslips.png").similar(0.80), 160)
type("c")
type("p", KeyModifier.ALT)
type("a")
wait(2)
assert exists("ProcedureEdi.png")
type("d")
waitVanish("ProcedureEdi.png")
procedit.close()

waitVanish("PubiiiiVisib.png")
logging.debug(' ')
logging.debug('----Procedure Editor launched and closed with out issue')
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Launch Station Administrator')
statadmn.open()
wait(Pattern("Locationofse.png").similar(0.88), 160)
type("h", KeyModifier.ALT)
type("a")
wait(2)
assert exists("StationAdmin.png")
type("d")
waitVanish("StationAdmin.png")
statadmn.close()

waitVanish(Pattern("Locationofse.png").similar(0.88))
logging.debug(' ')
logging.debug('----Station admin launched and closed with out issue')
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Launch Timeslips')
timeslip.open()
wait(Pattern("aJxmz2MaaZE.png").similar(0.89), 160)
DBChecks.checkFor_Preferror()
DBChecks.checkFor_BkuPopup()
DBChecks.checkFor_BillingDate()  
DBChecks.checkFor_SPS()
DBChecks.checkFor_PEP()
wait(2)
type(Key.SPACE, KeyModifier.ALT)
type("x")
type("w", KeyModifier.CTRL)
type("h", KeyModifier.ALT)
type("a")
wait(2)
assert exists(Pattern("1360963669806.png").similar(0.82))
type("d")
waitVanish(Pattern("1360963669806.png").similar(0.82))
timeslip.close()

waitVanish("EnteranExpen-1.png")
logging.debug(' ')
logging.debug('----Timeslips launched and closed with out issue')   
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Launch TSImport')
tsimport.open()
wait(Pattern("EileIemplate.png").similar(0.86), 160)
type("h", KeyModifier.ALT)
type("a")
wait(2)
assert exists(Pattern("Import.png").similar(0.87))
type("d")
waitVanish(Pattern("Import.png").similar(0.86))
tsimport.close()

waitVanish(Pattern("EileIemplate.png").similar(0.86))
logging.debug(' ')
logging.debug('----TSImport launched and closed with out issue')



#----------------------------------------#
def test_tcapture():    
    logging.debug('- - - - - - - - - - - - - - -')
    logging.debug(' ')
    logging.debug('----Launch Time capture application')
    tcapture.open()
    if exists("Youhaveanold.png", 30):
        type('n')
        wait(.5)
    if exists(Pattern("Showthismess.png").similar(0.87), 20):
        type(Key.ENTER)
    wait("cunmnuSlwpsE.png", 20)
    #if exists("3-2.png", 0) #or exists("I-2.png", 0):
         #rightClick(getLastMatch())
    rightClick("cunmnuSlwpsE.png")
    wait(.5)
    type("a")
    assert exists("ii-2.png")
    type("d")
    waitVanish("ii-2.png")
    tcapture.close()
    
    waitVanish("cunmnuSlwpsE.png", 20)
    logging.debug(' ')
    logging.debug('----Time capture launched and closed with out issue')

if Settings.Version != Settings.tInstallTypesE[0]:
    test_tcapture()

#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
    #Section opens Timeslips and sets preferences and general settings
logging.debug(' ')
logging.debug('----Launch TS and set preferences with general settings')
timeslip.open()
DBChecks.checkFor_Preferror()
DBChecks.checkFor_BkuPopup()
DBChecks.checkFor_BillingDate()  
DBChecks.checkFor_SPS()
DBChecks.checkFor_PEP()
wait("leibmaEEQSle.png", 60)
logging.debug(' ')
logging.debug('----Restoring Default Prefs')
RestorePrefs.restore_prefs()
wait(1)
logging.debug(' ')
logging.debug('----Setup General Settings')
DBSetup.db_setup()
wait(1)
#----------------------------------------#
    #section begins creating basic Data
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('Creating Timeslips Data')
for x in range(1, 2):
    logging.debug(' ')
    logging.debug('- Create Timekeeper')
    CreateTimekeeper.create_timekeeper(x)
    wait(1)
    logging.debug(' ')
    logging.debug('- Create Clients')
    if Settings.Version >= '2015':
        CreateClient.new_create_client(x)
    elif  Settings.Version < '2015':
        CreateClient.create_client(x)
    wait(1)
    logging.debug(' ')
    logging.debug('- Create Tasks')
    CreateTask.create_task(x)
    wait(1)
    logging.debug(' ')
    logging.debug('- Create Expenses')
    CreateExpense.create_expense(x)
    wait(1)
logging.debug(' ')
logging.debug('- Create Custom Fields')
CreateCustom.create_customfields()
wait(2)
logging.debug(' ')
logging.debug('- Create References')
CreateReference.create_reference()
wait(2)
logging.debug(' ')
logging.debug('- Clearing any previous slips')
ClearSlips.clear_slips()
wait(1)
logging.debug(' ')
logging.debug('- Creating Timeslips')
CreateTimeSlipNew.create_timeslip()
wait(1)
logging.debug(' ')
logging.debug('- Creating Expense slips')
CreateExpenseSlipNew.create_expslip()
wait(1)
logging.debug(' ')
logging.debug('- Expanded Slip Functionality')
SlipsExpandedFunctionalityComplete.ts_expanded_functions()
wait(1)
logging.debug(' ')
logging.debug('- Creating Payments')
CreateTransactions.create_payment()
wait(1)
logging.debug(' ')
logging.debug('- Creating Credits')
CreateTransactions.create_credit()
wait(1)
logging.debug(' ')
logging.debug('- Creating Refunds')
CreateTransactions.create_refund()
wait(1)
logging.debug(' ')
logging.debug('- Creating Bank Accounts')
CreateBank.create_bank()
wait(1)
logging.debug(' ')
logging.debug('- Creating Fund transactions')
CreateFundTrans.create_fundtransaction()
wait(1)
timeslip.close()
logging.debug(' ')
logging.debug('- Timeslips Closed')
logging.debug('- - - - - - - - - - - - - - -')
#----------------------------------------#
    #this section is to test import client and slip data using TSIMPORT
logging.debug(' ')
logging.debug('----Importing Clients using TSimport')
ImportClient.import_client()
wait(1)
logging.debug(' ')
logging.debug('----Importing slips using TSImport')
ImportSlips.import_slips()

#----------------------------------------#
    #This section begins verifying Bill Functions UI and everything should 
    #launch with out error
    #Billing assistant launch, launch client from BA, Launch FA, Set/Apply+ FA filters
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Opening Timeslips')
timeslip.open()
DBChecks.checkFor_Preferror()
DBChecks.checkFor_BkuPopup()
DBChecks.checkFor_BillingDate()  
DBChecks.checkFor_SPS()
DBChecks.checkFor_PEP()
wait("leibmaEEQSle.png", 60)
    #Billing Assistant
logging.debug(' ')
logging.debug('----Opening Billing Assistant')
keyDown(Key.SHIFT)
type('b', KeyModifier.CTRL)
keyUp(Key.SHIFT)
if exists(Pattern("SelectwhichB.png").similar(0.87)):
    type(Key.ENTER)
wait(Pattern("BillingAssis.png").similar(0.91))
logging.debug(' ')
logging.debug('- Launching Client from Billing Assistant')
for x in range(1, 6):
    TABFunction.tab(x)
type(Key.ENTER)
wait("InformationC.png", 90)
type(Key.F4, KeyModifier.CTRL)
waitVanish("InformationC.png")
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("BillingAssis.png").similar(0.91))
logging.debug(' ')
logging.debug('- Billing assistant Closed')
    #Firm Assistant
logging.debug(' ')
logging.debug('----Launching Firm Assistant')
type('b', KeyModifier.ALT)
wait(1)
type('f')
wait(Pattern("ClickUpdatew.png").similar(0.94), 90)
type(Key.TAB)
type(Key.TAB)
type(Key.TAB)
type(Key.ENTER)
wait(Pattern("InterestTota.png").similar(0.86), 90)
logging.debug(' ')
logging.debug('- Applying Client filter')
type('s', KeyModifier.ALT)
wait(Pattern("Usingfilters.png").similar(0.91), 90)
type(Key.TAB)
type('c')
type(Key.TAB)
type(Key.SPACE)
wait(Pattern("Youcanselect.png").similar(0.92))
type(Key.F4)
wait(1)
type(Key.ENTER)
waitVanish(Pattern("Youcanselect.png").similar(0.92))
type('o', KeyModifier.ALT)
waitVanish(Pattern("Usingfilters.png").similar(0.91))
type(Key.ENTER)
waitVanish(Pattern("ClickUpdatew-1.png").similar(0.89))
keyDown(Key.SHIFT)
type(Key.TAB)
keyUp(Key.SHIFT)
type(Key.ENTER)
logging.debug(' ')
logging.debug('- Asserting Client filter applied correctly')
assert exists(Pattern("YeYeEndDateD-1.png").similar(0.90))
logging.debug(' ')
logging.debug('- Closing Firm Assistant')
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("YeYeEndDateD-1.png").similar(0.90))

#----------------------------------------#
    #This section begins the security portion of the smoke test
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Setting up Global Security, Enabling Security')
type('p', KeyModifier.ALT)
type('s')
type('g')
wait(Pattern("Usethesesett-2.png").similar(0.91))
type('r', KeyModifier.ALT)
type('s', KeyModifier.ALT)
paste('123456789')
type('e', KeyModifier.ALT)
type(Key.ENTER)
onAppear("Yournewpassw-3.png", type(Key.ENTER))
waitVanish(Pattern("Usethesesett-2.png").similar(0.91))
wait(1)
type('n', KeyModifier.ALT)
wait(1)
logging.debug('----Setting up Security Settings, Defining TK Security')
type('p', KeyModifier.ALT)
type('s')
type('r')
onAppear(Pattern("Pleaseentert-1.png").similar(0.85), paste('123456789'))
type(Key.ENTER)
wait(Pattern("HerearetheTi-3.png").similar(0.89))
type('s. r')
wait(1)
type('o', KeyModifier.ALT)
wait("Accessrights-1.png")
type('w', KeyModifier.ALT)
paste('987654321')
wait(1)
logging.debug('- Disabling all of Slip entry ')
type('a', KeyModifier.ALT)
wait(1)
type('sl')
wait(1)
type(Key.TAB)
wait(1)
type(Key.DELETE)
onAppear("Uncheckingth-1.png", type('y', KeyModifier.ALT))
wait(1)
logging.debug('- Disabling all of AR Transactions')
type('a', KeyModifier.ALT)
wait(1)
type('accounts')
wait(1)
type(Key.TAB)
wait(1)
type(Key.DELETE)
wait(1)
logging.debug('- Disabling all of Client name access')
type('a', KeyModifier.ALT)
wait(1)
type('cli')
type(Key.TAB)
wait(1)
type(Key.DELETE)
type(Key.TAB)
type(Key.ENTER)
onAppear(Pattern("Yournewpassw-2.png").similar(0.91), type(Key.ENTER))
waitVanish(Pattern("SRobertsonNa-1.png").similar(0.91))
type(Key.F4, KeyModifier.ALT)
waitVanish(Pattern("HerearetheTi-2.png").similar(0.81))
logging.debug('- Begin Log out and Lock')
type('c', KeyModifier.ALT)
type('l')
wait(Pattern("Password-1.png").similar(0.89), 120)
logging.debug('- Logging back into TS DB')
type('s. ')
type('p', KeyModifier.ALT)
paste('987654321')
type(Key.ENTER)
waitVanish(Pattern("PasswordXXXX-1.png").similar(0.85))
wait("lezEEQZESlew-1.png", 120)
logging.debug('- Testing Slip list/entry access')
type('m', KeyModifier.CTRL)
wait("Youdonothave-10.png", 30)
type(Key.ENTER)
waitVanish("Youdonothave-10.png")
logging.debug('- Testing Billing Assistant Access')
keyDown(Key.SHIFT)
type('b', KeyModifier.CTRL)
keyUp(Key.SHIFT)
wait("Youdonothave-12.png", 30)
type(Key.ENTER)
waitVanish("Youdonothave-12.png")
logging.debug('- Testing AR Trans Access')
type('t', KeyModifier.CTRL)
wait("Youdonothave-14.png", 30)
type(Key.ENTER)
logging.debug('- Testing Client name access')
type('n', KeyModifier.ALT)
type('i')
wait("l4wlEUPBWTem-1.png", 30)
type('sik')
wait(1)
logging.debug('- Test Open Client')
type('o', KeyModifier.CTRL)
wait("Youdonothave-9.png", 30)
type(Key.ENTER)
waitVanish("Youdonothave-9.png")
logging.debug('- Test Edit Client')
type(Key.DELETE, KeyModifier.CTRL)
onAppear("Thiscommandw-1.png", type('y'))
onAppear(Pattern("Thefollowing.png").similar(0.91), type('y'))
wait("Youdonothave-11.png", 30)
type(Key.ENTER)
waitVanish("Youdonothave-11.png")
logging.debug('- Test New Client')
type('n', KeyModifier.CTRL)
wait("Youdonothave-13.png", 30)
type(Key.ENTER)
waitVanish("Youdonothave-13.png")
type(Key.F4, KeyModifier.CTRL)
waitVanish("l4wlEUPBWTem-1.png")
logging.debug('- Disabling Security')
type('p', KeyModifier.ALT)
type('s')
type('g')
onAppear("EntertheSupe-1.png", paste('123456789'))
type(Key.ENTER)
wait("Usethesesett-3.png", 30)
type(Key.DELETE)
keyDown(Key.SHIFT)
type(Key.TAB)
type(Key.TAB)
keyUp(Key.SHIFT)
type(Key.SPACE)
type(Key.ENTER)
if exists("TheSuperviso.png"):
        type('y')
waitVanish(Pattern("Usethesesett-3.png").similar(0.91))


#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Generating Bills')
logging.debug('- Generate bills print to display')
type('b', KeyModifier.CTRL)
wait(Pattern("NameGenerate.png").similar(0.90), 30)
type(Key.TAB)
type('c')
type(Key.TAB)
type(Key.SPACE)
wait(Pattern("Youcanselect-1.png").similar(0.92), 30)
type('silk')
wait(1)
type(Key.F4)
type(Key.ENTER)
waitVanish(Pattern("Youcanselect-1.png").similar(0.92))
type('p', KeyModifier.CTRL)
wait("Invoicesubmi-2.png", 30)
logging.debug('- Closing Print to display')
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("Invoicesubmi-1.png").similar(0.91))
type(Key.F4, KeyModifier.CTRL)
if exists("Youhavechang.png"):
    type('n')
waitVanish(Pattern("NameGenerate.png").similar(0.90))

#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Billing Reports')
logging.debug('- Testing Adding a default billing report')
type(Key.F3, KeyModifier.CTRL)
wait(Pattern("Welcometothe-3.png").similar(0.89), 30)
type('a', KeyModifier.ALT)
wait(1)
type('n', KeyModifier.ALT)
wait(1)
type('gener')
wait(1)
type('n', KeyModifier.ALT)
wait(1)
paste('Generate Bills Copy')
wait(1)
type('n', KeyModifier.ALT)
wait(1)
type(Key.ENTER)
waitVanish(Pattern("Reportiscrea-3.png").similar(0.89))
onAppear(Pattern("NameGenerate-11.png").similar(0.95), type('s', KeyModifier.CTRL))
onAppear(Pattern("TypeGenerate-3.png").similar(0.93), type(Key.ENTER))
waitVanish(Pattern("TypeGenerate-3.png").similar(0.93))
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("NameGenerate-11.png").similar(0.95))
logging.debug('- Open and run Prebill worksheet report')
type('b', KeyModifier.ALT)
type('p')
wait(Pattern("NamePrebiWor-4.png").similar(0.86), 30)
type('p', KeyModifier.CTRL)
wait(Pattern("SqQAAn10rri0.png").similar(0.78), 30)
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("SqQAAn10rri0.png").similar(0.78))
logging.debug('- Generate bills')
type('b', KeyModifier.CTRL)
onAppear(Pattern("NameGenerate-13.png").similar(0.85), type('p', KeyModifier.CTRL))
wait("Invoicesubmi-2.png", 30)
for x in range(1, 6):
    TABFunction.tab(x)
wait(1)
type('pdf')
wait(1)
type('p', KeyModifier.CTRL)
wait(Pattern("11IIIII111In-3.png").similar(0.92), 30)
type(Key.TAB)
wait(1)
paste(os.path.join(r"C:\tssmoketest", 'Reports', "Bills for Proof.PDF"))
type(Key.ENTER)
logging.debug('- Placing bill in Proof stage')
if exists(Pattern("Doyouwanttor-3.png").similar(0.91)):
    type('y')
wait(Pattern("Billshavebee-5.png").similar(0.91), 30)
click("Lockbills.png")
type(Key.ENTER)
waitVanish(Pattern("Billshavebee-5.png").similar(0.91))
if exists(Pattern("Selectwhichr-3.png").similar(0.91)):
    type(Key.F4, KeyModifier.ALT)
wait(1)
type('w', KeyModifier.CTRL)
waitVanish(Pattern("NameGenerate-12.png").similar(0.87))
logging.debug('- Placing bill in Revision')
keyDown(Key.SHIFT)
type('a', KeyModifier.CTRL)
keyUp(Key.SHIFT)
wait(Pattern("Proofstagebi-3.png").similar(0.89), 30)
type(Key.DOWN)
type(Key.INSERT)
type('c', KeyModifier.ALT)
onAppear(Pattern("Ifyouwanttoi-4.png").similar(0.90), type('r', KeyModifier.ALT))
wait("NewChargesBi-3.png", 30)
logging.debug('- Clearing from Revision')
type(Key.F6)
wait("Revisionstag-7.png", 30)
type(Key.DOWN)
type(Key.INSERT)
type('c', KeyModifier.ALT)
onAppear(Pattern("Doyouwanttoc-3.png").similar(0.91), type('y'))
waitVanish(Pattern("Doyouwanttoc-3.png").similar(0.91))
type(Key.F4, KeyModifier.ALT)
waitVanish(Pattern("Revisionstag-6.png").similar(0.91))
logging.debug('- Generate Bills for Approval')
type('b', KeyModifier.CTRL)
onAppear(Pattern("NameGenerate-13.png").similar(0.85), type('p', KeyModifier.CTRL))
wait("Invoicesubmi-2.png", 30)
for x in range(1, 6):
    TABFunction.tab(x)
wait(1)
type('pdf')
wait(1)
type('p', KeyModifier.CTRL)
wait(Pattern("11IIIII111In-3.png").similar(0.92), 30)
type(Key.TAB)
wait(1)
paste(os.path.join(r"C:\tssmoketest", 'Reports', "Bills for Approval.PDF"))
type(Key.ENTER)
logging.debug('- Placing bill in Approval stage')
if exists(Pattern("Doyouwanttor-3.png").similar(0.91)):
    type('y')
wait(Pattern("Billshavebee-5.png").similar(0.91), 30)
click(Pattern("Approvebills.png").similar(0.93))
wait(2)
type(Key.ENTER)
waitVanish("Billshavebee-6.png")
if exists(Pattern("Selectwhichr-3.png").similar(0.86)):
    type(Key.F4, KeyModifier.ALT)
wait(1)
type('w', KeyModifier.CTRL)
waitVanish(Pattern("NameGenerate-14.png").similar(0.88))
logging.debug('- Generating Statements')
type('b', KeyModifier.ALT)
type('s')
wait(Pattern("NameGenerate-12.png").similar(0.88))
type('p', KeyModifier.CTRL)
wait("SageQAAutoma.png", 30)
type(Key.F4, KeyModifier.CTRL)
waitVanish("SageQAAutoma.png")
type('w', KeyModifier.CTRL)
waitVanish(Pattern("NameGenerate-12.png").similar(0.88))
logging.debug('- Clearing Bills')
type('b', KeyModifier.ALT)
type('u')
wait(Pattern("Thisisalisto-5.png").similar(0.88), 30)
type(Key.DOWN)
wait(1)
type(Key.INSERT)
wait(1)
type('u', KeyModifier.ALT)
onAppear(Pattern("Ifyouwanttoi-4.png").similar(0.92), type('c', KeyModifier.ALT))
waitVanish(Pattern("Ifyouwanttoi-4.png").similar(0.92))
logging.debug('- Closing Bill Stage dialogs')
type(Key.F4, KeyModifier.ALT)
waitVanish(Pattern("Thisisalisto-4.png").similar(0.86))

#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Launching Dialogs using Toolbit buttons')
logging.debug('- Launching Slip list')
click(Pattern("1364584953271-1.png").similar(0.90))
wait(Pattern("srmwmuymeims-1.png").similar(0.88), 10)
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("srmwmuymeims-1.png").similar(0.88))
logging.debug('- Launching Client List')
click(Pattern("1364585300099-1.png").similar(0.90))
wait(Pattern("liwwiiwUPBWl-1.png").similar(0.90), 10)
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("liwwiiwUPBWl-1.png").similar(0.90))
logging.debug('-Launching Billing Assistant')
click(Pattern("1364585535447-1.png").similar(0.90))
wait(Pattern("EOPnhZIIZhnZ-3.png").similar(0.89), 10)
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("EOPnhZIIZhnZ-3.png").similar(0.89))
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Launching Enhanced Navigator Items')
logging.debug('-- Prepare Billing Topic')
click(Pattern("PrepareBilli-1.png").similar(0.89))
logging.debug('- Slip list')
wait(Pattern("PrebillWorks-2.png").similar(0.91), 10)
click("SlipList-2.png")
wait(Pattern("shawmuymeims-1.png").similar(0.91), 20)
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("shawmuymeims-1.png").similar(0.91))
logging.debug('- Billing Assistant')
click(Pattern("BillingAssis-2.png").similar(0.91))
wait(Pattern("EOPnhZIIZhnZ-2.png").similar(0.90), 10)
type('w', KeyModifier.CTRL)
waitVanish(Pattern("EOPnhZIIZhnZ-2.png").similar(0.90))
logging.debug('-- Accounts Receivable Topic')
click(Pattern("AccountsRece-1.png").similar(0.89))
logging.debug('- Show Payments and Receivables')
wait(Pattern("EnteraWriteO-1.png").similar(0.91), 10)
click("ShowPaymenta-1.png")
wait(Pattern("ViewbyAll-1.png").similar(0.89))
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("ViewbyAll-1.png").similar(0.89))
logging.debug('- Enter a Payment')
click(Pattern("Enterapaymen-1.png").similar(0.88))
wait(Pattern("ID6HbalanceN-1.png").similar(0.90), 10)
type(Key.F4, KeyModifier.CTRL)
if exists(Pattern("Doyouwanttos-1.png").similar(0.88)):
    type('n', KeyModifier.ALT)
waitVanish(Pattern("ID6HbalanceN-1.png").similar(0.90))
logging.debug('- Listing Reports')
click(Pattern("istingReport-1.png").similar(0.89))
wait(Pattern("SelectanAFlL-1.png").similar(0.90), 10)
type('aged')
wait(1)
type(Key.ENTER)
wait(Pattern("NameAgedAFlB-1.png").similar(0.90), 10)
type(Key.F4, KeyModifier.CTRL)
waitVanish(Pattern("NameAgedAFlB-1.png").similar(0.90))
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----File Functions')
logging.debug('- Creating Timeslips Backup')
type('f', KeyModifier.ALT)
type('b')
wait(Pattern("Thisprocessc-4.png").similar(0.91), 30)
type(Key.ENTER)
wait("SaveasmeSage.png", 30)
logging.debug('- Saving file path and name')
paste(os.path.join(r'C:\tssmoketest', 'Backups'))
type(Key.ENTER)
wait(.5)
paste(startTime.strftime('Smoketest Backup %Y_%m_%d %H_%M_%S.bku'))
wait(1)
type('s', KeyModifier.ALT)
if exists("Abackupfilea-1.png"):
    type('y', KeyModifier.ALT)
wait(Pattern("Thebackupofy-2.png").similar(0.89), 120)
type(Key.ENTER)
waitVanish(Pattern("Thebackupofy-2.png").similar(0.89))
logging.debug('- Restoring Backup')
type('f', KeyModifier.ALT)
type('r')
wait(Pattern("Choosewheret-1.png").similar(0.91), 30)
type('u', KeyModifier.ALT)
type(Key.ENTER)
wait(Pattern("SageTimeslip-3.png").similar(0.91), 120)
type(Key.ENTER)
waitVanish(Pattern("Choosewheret-1.png").similar(0.91))
logging.debug('- Creating new Professions DB')
type('f', KeyModifier.ALT)
type('n')
type('d')
wait(Pattern("SelectaDatab-1.png").similar(0.88), 30)
type(Key.DOWN)
type('n', KeyModifier.ALT)
paste(os.path.join('c:', os.sep, 'tssmoketest', Settings.Version, 'accountant'))
type('n', KeyModifier.ALT)
if exists(Pattern("UneormoreSag.png").similar(0.89)):
    type('y', KeyModifier.ALT)
    wait(1)
paste('accountant type database')
type('n', KeyModifier.ALT)
wait(.5)
type('n', KeyModifier.ALT)
wait(.5)
type('n', KeyModifier.ALT)
wait(.5)
type('n', KeyModifier.ALT)
wait(.5)
type('n', KeyModifier.ALT)
wait(.5)
type('n', KeyModifier.ALT)
wait(.5)
type('n', KeyModifier.ALT)
wait(.5)
type('n', KeyModifier.ALT)
wait(.5)
wait(Pattern("YourDatabase-1.png").similar(0.91), 180)
type('f', KeyModifier.ALT)
waitVanish(Pattern("YourDatabase-1.png").similar(0.91))
onAppear(Pattern("FirmAddressI-1.png").similar(0.91), type(Key.ESC))
waitVanish(Pattern("FirmAddressI-1.png").similar(0.91))
onAppear(Pattern("EIltly0UlIIH-1.png").similar(0.91), type(Key.ESC))
wait(Pattern("SageTimeslip-2.png").similar(0.88))
type('y', KeyModifier.ALT)
logging.debug('- Opening Tssmoketest DB from Splash screen')
wait(Pattern("1364911159766-1.png").similar(0.91), 60)
type('o', KeyModifier.ALT)
wait(Pattern("FilesofmeSag-1.png").similar(0.91), 60)
paste(os.path.join('c:', os.sep, 'tssmoketest', Settings.Version, 'data01'))
wait(1)
type(Key.ENTER)
wait(1)
type('o', KeyModifier.ALT)
wait(Pattern("SelectTirnek-1.png").similar(0.91), 120)
type('f', KeyModifier.ALT)
wait("isEEQZESlewQ-1.png", 60)
logging.debug('- Performing Purge function of slips')
type('f', KeyModifier.ALT)
type('p')
wait(Pattern("SelectDatatu-1.png").similar(0.91))
type('s', KeyModifier.ALT)
onAppear(Pattern("Purgingdatap-1.png").similar(0.90), type(Key.ENTER))
type(Key.DOWN)
type(Key.DOWN)
type(Key.TAB)
type(Key.ENTER)
wait(Pattern("Usingfilters-2.png").similar(0.91), 30)
type(Key.TAB)
type(Key.TAB)
type(Key.TAB)
type(Key.TAB)
type(Key.ENTER)
waitVanish("SelectedFilt.png")
type('o', KeyModifier.ALT)
waitVanish(Pattern("Usingfilters-2.png").similar(0.91))
keyDown(Key.SHIFT)
type(Key.TAB)
keyUp(Key.SHIFT)
type(Key.ENTER)
onAppear(Pattern("Youareattemp-1.png").similar(0.91), type(Key.ENTER))
type('p', KeyModifier.ALT)
type(Key.ENTER)
onAppear(Pattern("Youhaveselec-1.png").similar(0.90), type('y', KeyModifier.ALT))
wait(Pattern("urgepermanen-1.png").similar(0.91), 30)
type(Key.ESC)
onAppear(Pattern("Anydatathatm-1.png").similar(0.89), type('y', KeyModifier.ALT))
if exists("Nodatawascha-1.png"):
    type(Key.ENTER)
wait(Pattern("Purgewassucc-2.png").similar(0.91), 120)
type(Key.ENTER)
waitVanish(Pattern("Purgewassucc-2.png").similar(0.89))
logging.debug('- Purge successful')
logging.debug('- Closing Clients')
type('n', KeyModifier.ALT)
type('i')
wait(Pattern("UPBYIlTempla.png").similar(0.91))
click(Pattern("1364927221383.png").similar(0.91))
wait("Usethisdialo-3.png", 30)
type('c', KeyModifier.ALT)
type(Key.UP)
type(Key.TAB + Key.TAB)
type('sik')
wait(1)
type(Key.F4)
wait(1)
type(Key.TAB)
type(Key.ENTER)
wait("Areyousureyo-1.png", 30)
type('y', KeyModifier.ALT)
waitVanish("Usethisdialo-3.png")
type(Key.F6 + Key.F6 + Key.F6)
wait(Pattern("DpenITemplat-1.png").similar(0.87), 30)
assert exists(Pattern("DpenITemplat.png").similar(0.94))
logging.debug('- Opening Clients')
click(Pattern("1364927221383.png").similar(0.91))
wait("Usethisdialo-3.png")
type('c', KeyModifier.ALT)
type('c')
type(Key.TAB + Key.TAB)
type('sik')
wait(1)
type(Key.F4)
type(Key.TAB)
type(Key.ENTER)
wait(Pattern("Areyousureyo-2.png").similar(0.86), 30)
type('y')
waitVanish("Usethisdialo-3.png")
type(Key.F6)
wait(1)
type('sik')
assert exists(Pattern("SikuliTestCl.png").similar(0.88))
type('w', KeyModifier.CTRL)
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Timesheet Entry')
logging.debug('- Create Timesheet Template')
type('s', KeyModifier.ALT)
type('t')
type('t')
wait(Pattern("Viewby.png").similar(0.90), 30)
type('n', KeyModifier.CTRL)
wait(Pattern("Templatedeta.png").similar(0.88), 30)
paste('Sikuli TS Template')   
type(Key.TAB)
type(Key.TAB)
type('sik')
wait(1)
type(Key.TAB)
type('sik')
wait(1)
type(Key.TAB)
type('sik')
wait(1)
type(Key.TAB)
type('sik')
wait(1)
type(Key.TAB)
paste('Sikuli Timesheet Template Description')
wait(1)
type('s', KeyModifier.CTRL)
wait(1)
type('w', KeyModifier.CTRL)
if exists("D0youwanttos.png"):
    type('n', KeyModifier.ALT)
waitVanish("Templatedeta-1.png")
logging.debug('- Launching Timesheet Template')
type('s', KeyModifier.ALT)
type('ts')
wait("XiuAvmeufxuc.png", 30)
type('sik')
wait(Pattern("SikuliTestCl-1.png").similar(0.88), 30)
type(Key.TAB + Key.TAB)
type('2')
type('s', KeyModifier.CTRL)
wait("2DI-1.png", 20)
type('o', KeyModifier.CTRL)
wait("SikuliTestUm.png", 20)
type('s', KeyModifier.CTRL)
waitVanish("SikuliTestUm.png")
type(Key.F5)
wait("2Ui.png", 10)
type(Key.F5)
type('s', KeyModifier.CTRL)
type('w', KeyModifier.CTRL)
waitVanish(Pattern("SikuliTestCl-1.png").similar(0.88))
logging.debug('- Run Timesheet entry report')
type('r', KeyModifier.CTRL)
wait(Pattern("BillingSipIA.png").similar(0.91), 120)
type(Key.F6)
wait(.5)
type('time sheet slip entry' + Key.ENTER)
wait("limnaSheaSip.png", 120)
assert exists("2DOD2D.png")
type(Key.ESC)
waitVanish("limnaSheaSip.png")
type('w', KeyModifier.CTRL)
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Timeslips Today')
logging.debug('- Create TST Template')
keyDown(Key.ALT)
type('c t s')
keyUp(Key.ALT)
wait(Pattern("Timeslipscou.png").similar(0.88), 120)
type('c')
wait(Pattern("Usethisdialo-1.png").similar(0.86), 120)
dragDrop("AIFTransacti.png", "Emptv.png")
type('w', KeyModifier.ALT)
type('1')
wait(.5)
type('s', KeyModifier.CTRL)
wait(Pattern("SaveastypeTi.png").similar(0.91), 120)
paste('Sikuli TST Template')
type(Key.ENTER)
waitVanish(Pattern("SaveastypeTi.png").similar(0.91))
if exists(Pattern("SikuliTSTTem.png").similar(0.93)):
    type('y')
wait(.5)
type('w', KeyModifier.CTRL)
waitVanish(Pattern("Usethisdialo-1.png").similar(0.86))
logging.debug('- Assign TST Template')
keyDown(Key.ALT)
type('c t a')
keyUp(Key.ALT)
wait(Pattern("Usethisdialo-2.png").similar(0.94), 120)
type('sikuli')
wait(.5)
type(Key.TAB + Key.ENTER)
assert exists(Pattern("Template.png").similar(0.96))
type(Key.F4, KeyModifier.ALT)
waitVanish(Pattern("Usethisdialo-2.png").similar(0.94))
logging.debug('- Launch TST Manually')
keyDown(Key.ALT)
type('c t s')
keyUp(Key.ALT)
wait(Pattern("AIRTransacti.png").similar(0.90), 30)
type('w', KeyModifier.CTRL)
waitVanish(Pattern("AIRTransacti.png").similar(0.90))
logging.debug('- Change Prefs to launch TST')
keyDown(Key.ALT)
type('p p')
keyUp(Key.ALT)
wait(Pattern("InterfaceSta-2.png").similar(0.91), 30)
type('n n')
type(Key.TAB)
type('y' + Key.ENTER)
waitVanish(Pattern("InterfaceSta-2.png").similar(0.91))
logging.debug('- Close and reopen Timeslips to Launch TST')
#type(Key.F4, KeyModifier.ALT)
timeslip.close()
if exists(Pattern("ExitSageTime.png").similar(0.94), 30):
    type('y')
if exists(Pattern("YourSageTime.png").similar(0.94), 30):
    type(Key.ESC)
wait(1)
timeslip.open()
DBChecks.checkFor_Preferror()
DBChecks.checkFor_BkuPopup()
DBChecks.checkFor_BillingDate()  
DBChecks.checkFor_SPS()
DBChecks.checkFor_PEP()
wait(Pattern("AIRTransacti-1.png").similar(0.96), 120)
type('w', KeyModifier.CTRL)
logging.debug('- Change Prefs to launch Navigator')
keyDown(Key.ALT)
type('p p')
keyUp(Key.ALT)
wait(Pattern("InterfaceSta-2.png").similar(0.91), 30)
type('n y')
type(Key.TAB)
type('n' + Key.ENTER)
waitVanish(Pattern("InterfaceSta-2.png").similar(0.91))
type(Key.F10, KeyModifier.CTRL)
wait("ChangeTempla.png", 60)
#----------------------------------------#
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(' ')
logging.debug('----Alerts')
logging.debug('- Calling Alerts Regression Script')
Alerts.alerts_regression()

#------------------2014 SR1 Slip defect fix checks--------------------#

2014SR1DefectFixes.SR1_2014_defect_fixes()
#--------------------Slip List Regression-----------------------------------------------#
SlipsList.slip_list()

#-------------------------------------------------------------------#
timeslip.close()
#----------------------------------------#








#----------------------------------------#
endTime = datetime.datetime.now()
logging.debug(' ')
logging.debug('- - - - - - - - - - - - - - -')
logging.debug(endTime.strftime("Stopped at: %Y-%m-%d %H:%M:%S"))
logging.debug('- - - - - - - - - - - - - - -')

elapsedTime = endTime - startTime
logging.debug("Elapsed:    %s" %elapsedTime)

EmailTestResults.email_results()



popup('Test Successful Click Ok to Exit')

exit()