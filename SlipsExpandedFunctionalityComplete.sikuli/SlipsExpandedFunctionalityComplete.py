from sikuli import*
import CreateCalendarEntry
import OpenOldSlipEntry
import TABFunction
import SlipDescription
def ts_expanded_functions():

        #-----This script assumes default preferences are set and used-----#
        #-----This script requires all NN2 to be reset to 2 before running-----# 
        #-----this script requires 3 slips with ID 1, 2 and 3 to exists first prior to running-----#
        #-----section below is only for initial testing to reset slip ID to 4-----#
    """
    type("p", KeyModifier.ALT)
    type("g")
    wait(Pattern("FirmAddrcssI.png").similar(0.93))
    type(Key.F6, KeyModifier.SHIFT)
    type(Key.F6, KeyModifier.SHIFT)
    type(Key.F6, KeyModifier.SHIFT)
    type(Key.F6, KeyModifier.SHIFT)
    type("4")
    type(Key.ENTER)
    type("y")
    waitVanish(Pattern("Transactions.png").similar(0.87))"""
        #-----section above is only for initial testing to reset slip ID to 4-----#
        
        #-----Section below is only for initial testing to reset NN2s to ID 2 -----#
    """    
    type("p", KeyModifier.ALT)
    type("g")
    wait(Pattern("FirmAddrcssI.png").similar(0.93))
    type(Key.F6)
    type(Key.F6)
    type(Key.F6)
    type(Key.F6)
    type(Key.F6)
    type(Key.F6)  
    wait(.5)
    type("f", KeyModifier.ALT)
    for x in range(1, 5):
        TABFunction.tab(x)
    paste("2")
    for x in range(1, 6):
        TABFunction.tab(x)
    paste("2")
    for x in range(1, 6):
        TABFunction.tab(x)
    paste("2")
    type(Key.ENTER)
    wait("Ycuhavesetth.png")
    type("y")
    wait("Youhavesetth.png")
    type("y")
    wait("Youhavesetth-1.png")
    type("y")    
    waitVanish(Pattern("NamesNicknam.png").similar(0.92))"""  
    
       #-----Section above is only for initial testing to reset NN2s to ID 2 -----#

       
    #OpenOldSlipEntry.open_slip_old() only need on old slip entry tests
    
        #-----section tests edit mode on slip type toggle-----#
    
    type("w", KeyModifier.CTRL)
    click(Pattern("1353522518582.png").similar(0.94))
    assert exists(Pattern("SlipEntry-1.png").similar(0.98))
    wait(.5)
    type("e")
    wait(.5)
    assert exists(Pattern("SlipEntry.png").similar(0.95))
    wait(.5)
    type("t")
    type(Key.TAB)
    wait(.5)
        #-----section tests and asserts shortcuts for TK options-----#
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("n")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(Pattern("TimekeeperIn.png").similar(0.93))
    assert exists(Pattern("TimekeeperIn.png").similar(0.93))
    wait(.5)
    paste("Slip Extended Funct TK")
    wait(.5)
    type("s", KeyModifier.CTRL)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("o")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(Pattern("ISlipExtende.png").similar(0.93))
    assert exists(Pattern("ISlipExtende.png").similar(0.93))
    type(Key.F4, KeyModifier.CTRL)
    waitVanish(Pattern("TimekeeperIn.png").similar(0.93))
    assert exists(Pattern("SlipExtended.png").similar(0.93))
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("2")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    assert not exists(Pattern("SbFIICtTK.png").similar(0.97))
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("1")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)   
    assert exists(Pattern("SlipExtended.png").similar(0.93))
        #-----section tests and asserts Activity options-----#
    rightClick(Pattern("Task-2.png").similar(0.93))  
    wait(.5)
    assert exists(Pattern("Task.png").similar(0.86)) #update with new graphic once Sam fixes this.
    wait(.5)
    type(Key.ESC)
    wait(.5)
    type(Key.TAB)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("n")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    assert exists(Pattern("NewSetupthis.png").similar(0.95))
    wait(.5)
    paste("Slip Extended Funct Task")
    type("s", KeyModifier.CTRL)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("o")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    assert exists(Pattern("IElipExtende.png").similar(0.95))
    wait(1)
    type(Key.F4, KeyModifier.CTRL)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("m")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("SlipExtended-1.png").similar(0.88))
    wait(.5)       
    assert exists(Pattern("MyTasks.png").similar(0.95))
    type(Key.ESC)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("a")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    rightClick(Pattern("Ii.png").similar(0.84))
    wait(.5)
    assert exists(Pattern("AllTasks.png").similar(0.95))
    type(Key.ESC)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("2")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("SbExtendedFu.png").similar(0.88))
    wait(.2)
    assert exists(Pattern("Nickname2.png").similar(0.93))
    type(Key.ESC)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("1")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("SlipExtended-1.png").similar(0.86))
    wait(.2)
    assert exists(Pattern("JNicknamel.png").similar(0.96))
    type(Key.ESC) 
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("4")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    rightClick("Expense-1.png")
    wait(.2)
    assert exists(Pattern("JExpense.png").similar(0.94))
    type(Key.ESC)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("3")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    rightClick(Pattern("SlipExtended-1.png").similar(0.94))
    wait(.2)
    assert exists(Pattern("Task-1.png").similar(0.94))
    wait(.5)
    type(Key.ESC)
        #-----Section below tests and asserts client options-----#
    wait(.5)
    type(Key.TAB)



    #code snippet below broken for now, launches old client info when it should launch new info. right click works as expected
    """
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("n")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)"""

#temp code below is work around for creating new client info
#------------------------------------------------------------------#    
    rightClick(Pattern("Client.png").similar(0.87))
    onAppear("ShiftCtrINSh.png", click("NewShiftCtrI.png"))
#------------------------------------------------------------------#
    wait(1)
    assert exists(Pattern("ClientInform.png").similar(0.93))
    wait(.5)
    paste("Slip Extended Funct Client")
    wait(.5)
    type(Key.ENTER)
    type(Key.F6 + Key.F6)   
    wait(Pattern("RateTable.png").similar(0.91), 20)
    
    paste("100")
    type(Key.TAB)
    paste("200")
    wait(.5)
    keyDown(Key.SHIFT)
    for x in range(1, 10):
        TABFunction.tab(x)
    keyUp(Key.SHIFT)
    type(Key.DOWN)
    for x in range(1, 4):
        TABFunction.tab(x)
    type(Key.SPACE)
    wait("WhenLevelisN.png", 30)
    type('slip')
    wait(.5)
    type(Key.TAB)
    type('slip')
    wait(.5)
    type(Key.TAB)    
    type("c")
    wait(.5)
    type(Key.TAB)
    type('2')
    wait(.5)
    type(Key.TAB)
    type(Key.ENTER)
    waitVanish("WhenLevelisN.png")   
    type("s", KeyModifier.CTRL)
    waitVanish("InformationC.png")



                                    
    #code snippet below is broken due to new client info dialogue
    """                    
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("o")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)"""

#temp code below is work around for opening client info
#---------------------------------------------------------------#            
    rightClick("SlipExtended-4.png")
    onAppear("ShiftCtrINSh.png", click("OpenShiftC1Z.png"))
    wait(1)                          
    wait(.5)
#---------------------------------------------------------------#

                                    
    assert exists(Pattern("Nidcname1Sli.png").similar(0.90))
    wait(.5)
    type(Key.F4, KeyModifier.CTRL)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("m")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("SlipExtended-2.png").similar(0.86))
    wait(.2)
    assert exists(Pattern("JMyClients.png").similar(0.94))
    type(Key.ESC)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("a")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    rightClick(Pattern("SlipExtended-2.png").similar(0.86))
    wait(.2)
    assert exists(Pattern("JAllClients.png").similar(0.94))
    type(Key.ESC)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("2")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("SbExtendedFu-1.png").similar(0.86))
    wait(.2)
    assert exists(Pattern("JNickname2.png").similar(0.94))
    type(Key.ESC)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("1")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("SlipExtended-2.png").similar(0.86))
    wait(.2)
    assert exists(Pattern("JNicknamel-1.png").similar(0.94))
    type(Key.ESC)
    wait(.5)
        #-----Section below tests and asserts references-----# 
    type(Key.TAB)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("n")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(2)
    assert exists("ClientNickna-1.png")
    wait(1)
    paste("Slip Extended Funct Reference")
    type(Key.ENTER)
    waitVanish("ClientNickna-1.png")
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("o")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    assert exists(Pattern("ISIIEExtende.png").similar(0.97))
    wait(1)
    type(Key.ESC)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("2")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("IISbExtended.png").similar(0.93))
    wait(.5)
    assert exists(Pattern("JNickname2-1.png").similar(0.93))
    type(Key.ESC)
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("1")
    
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(1)
    rightClick(Pattern("SlipExtended-3.png").similar(0.88))
    wait(.5)
    assert exists(Pattern("JNicknamel-1.png").similar(0.94))
    type(Key.ESC)
    wait(.5)
        #-----Section below tests slip description and all RTF formatting--------#
    """    
    type(Key.TAB + Key.TAB)
    SlipDescription.slip_description_shortcuts()"""
        #-----section below tests date options-----#
    type(Key.TAB + Key.TAB + Key.TAB)  
    paste("6/23/2020")
    wait(.5)
    assert exists(Pattern("Startdate.png").similar(0.94))
    wait(.5)
    type("t")
    wait(.5)
    assert not exists(Pattern("Startdate.png").similar(0.94))
    wait(.5)
    type(Key.TAB)
    paste("6/23/2020")
    wait(.5)
    assert exists(Pattern("Enddate62320.png").similar(0.94))
    wait(.5)
    type("t")
    wait(.5)
    assert not exists(Pattern("Enddate62320.png").similar(0.94))
    wait(.5)
    type(Key.TAB)
    wait(.5)
        #-----section below tests/asserts time spent/estimated/timer options-----#
    type("+", KeyModifier.SHIFT)
    wait(.5)
    assert exists(Pattern("StarttimeStn.png").similar(0.91))
    type(Key.ESC)
    wait(.5)
    type(Key.TAB)
    type("+", KeyModifier.SHIFT)
    wait(.5)
    assert exists(Pattern("StarttimeStn.png").similar(0.91))
    wait(.5)
    type(Key.ESC)
    type(Key.F5) #Start Timer
    assert exists(Pattern("Off.png").similar(0.96))
    wait(.5)
    type(Key.F5)
    assert exists(Pattern("Off-1.png").similar(0.95))
    wait(.5)
        #-----section below begins tests on standard "EDIT" right click pop up menu options-----#
    for x in range(1, 6):
        TABFunction.tab(x)
    type(Key.UP)
    wait(.5)
    assert not exists(Pattern("1353514620908.png").similar(0.91))
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("l")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    assert exists(Pattern("1375800135226.png").similar(0.93))
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("u")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    assert exists(Pattern("1375800199133.png").similar(0.93))
    wait(.5)
        #-----section below tests standard right click options  -----#
    type("l", KeyModifier.CTRL)
    wait(Pattern("TimeandExpen.png").similar(0.94))
    assert exists(Pattern("ViewByD.png").similar(0.96))
    type(Key.F4, KeyModifier.CTRL)
    waitVanish(Pattern("ViewByD.png").similar(0.96))
        #-----have to test save shortcut first to avoiding "save" pop up from occuring when changing pages with other shortcuts----#
    type("s", KeyModifier.CTRL)
    waitVanish(Pattern("IDNew.png").similar(0.94))
    assert not exists(Pattern("IDNew.png").similar(0.94))
    wait(.5)
    type(Key.PAGE_UP, KeyModifier.CTRL)
    assert exists(Pattern("ID.png").similar(0.94))
    wait(.5)
    type(Key.PAGE_DOWN, KeyModifier.CTRL)
    assert exists(Pattern("ID3.png").similar(0.95))
    wait(.5)
    type(Key.PAGE_UP)
    assert exists(Pattern("ID2.png").similar(0.96))
    wait(.5)
    type(Key.PAGE_DOWN)
    assert exists(Pattern("ID3.png").similar(0.95))
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("g")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    assert exists(Pattern("Movetotgookm.png").similar(0.98))
    wait(.5)
    type(Key.TAB)
    type("1")
    type(Key.ENTER)
    waitVanish(Pattern("MovetoglipMo.png").similar(0.94))
    assert exists(Pattern("ID.png").similar(0.94))
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("g")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    type(Key.TAB)
    type(Key.TAB)
    type(Key.UP)
    type(Key.ENTER)
    waitVanish(Pattern("MovetoglipMo-2.png").similar(0.97))
    assert exists(Pattern("D2.png").similar(0.98))
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("f")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(Pattern("Theselection.png").similar(0.96))
    type(Key.TAB)
    type("s")
    type(Key.TAB)
    type(Key.SPACE)
    wait(Pattern("Theselectedi.png").similar(0.95))
    type(Key.F4)
    type(Key.TAB)
    type(Key.ENTER)
    waitVanish(Pattern("Theselectedi-1.png").similar(0.94))
    type("o", KeyModifier.ALT)
    waitVanish(Pattern("Theselection.png").similar(0.96))
    assert exists(Pattern("ViewingSelec.png").similar(0.97))
    wait(.5)
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("f")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(Pattern("Theselection.png").similar(0.96))
    for x in range(1, 4):
        TABFunction.tab(x)
    type(Key.SPACE)
    type("o", KeyModifier.ALT)
    waitVanish(Pattern("Theselection.png").similar(0.96))
    #assert not exists(Pattern("ViewingSelec.png").similar(0.97)) #test when sam fixes this in next build
    wait(.5)
        #-----section below tests/asserts New and Duplicate options-----#

    type("n", KeyModifier.CTRL)
    assert exists(Pattern("IDNew-2.png").similar(0.94))    
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("d")
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL) 
    wait(.5)
    assert exists(Pattern("TheEeldGenti.png").similar(0.97))
    type(Key.ENTER)
    type(Key.F4, KeyModifier.CTRL)

    
        #-----section below tests/asserts revert function-----#
        
    click("1353010884751.png")
    wait("SlipEntry-2.png")
    type("e")
    type(Key.ESC)
    onAppear(Pattern("SageTimeslip-1.png").similar(0.96), type("n"))
    
    waitVanish(Pattern("SageTimeslip-1.png").similar(0.96))
    assert exists(Pattern("Expense.png").similar(0.97))
    type(Key.ESC)
    wait(.5)
    onAppear(Pattern("SageTimeslip-1.png").similar(0.96), type("y"))
    assert exists(Pattern("Time.png").similar(0.97))
    wait(.5)
    
        #-----section below will only work on new slip entry as export is broken in old-----#    
    rightClick(Pattern("1353012338180.png").similar(0.94))
    wait(.5)
    assert exists(Pattern("Isem.png").similar(0.94))
    type(Key.ESC)
    type(Key.TAB)
    type(Key.TAB)
    type("Slip Extended Funct Task")
    type(Key.TAB)
    type("Slip Extended Funct Client")
    wait(.5)
    type(Key.TAB)
    wait(.5)
    type("s", KeyModifier.CTRL)
    wait(.5)
    rightClick(Pattern("1353012338180.png").similar(0.94))
    wait(.5)
    assert exists(Pattern("QExport.png").similar(0.92))
    wait(.5)
    type("x")
    onAppear(Pattern("OverviewTfis.png").similar(0.96), type(Key.ESC))
    type(Key.ESC)
    wait(.5)
    
        #-----Document Explore option -----#
    type("n", KeyModifier.CTRL)
    wait(Pattern("IDNew-1.png").similar(0.94))
    type(Key.TAB)
    type("slip extended funct tk")
    wait(.2)
    type(Key.TAB)
    type("slip extended funct task")
    wait(.2)
    type(Key.TAB)
    type("slip extended funct client")
    wait(.2)
    type(Key.TAB)
    type("slip extended funct reference")
    wait(.2)
    type("s", KeyModifier.CTRL)
    wait(Pattern("WamiugNoTime.png").similar(0.97))   
    assert exists(Pattern("WamiugNoTime.png").similar(0.97))
    rightClick(Pattern("1353012338180.png").similar(0.94))
    wait("NewDuulicate.png")
    type("o")
    wait(1)
    wait("DocsSlipExte-1.png", 60)
    assert exists("DocsSlipExte-1.png")
    type(Key.F4, KeyModifier.ALT)
    wait(.5)
    
        #-----section below tests/asserts attachment options -----# #only test in NEW slip entry)
    click(Pattern("Attadrnents.png").similar(0.98))
    rightClick(Pattern("1353012338180.png").similar(0.94))
    type("c")
    wait(Pattern("Sources.png").similar(0.95), 90)
    assert exists(Pattern("Sources.png").similar(0.95))
    type(Key.ESC)
    waitVanish(Pattern("Sources.png").similar(0.95))
    wait(1)
    keyDown(Key.SHIFT)
    for x in range(1, 8):
        TABFunction.tab(x)
    keyUp(Key.SHIFT)
    wait(1)
    type("b", KeyModifier.ALT)
    wait(Pattern("Lookin.png").similar(0.94), 60)
    paste(r'C:\Sikuli Scripts VM X\2015\Attachments')
    wait(1)
    type(Key.ENTER)
    wait(Pattern("FilenameFile.png").similar(0.92), 30)
    doubleClick(Pattern("ECalcFieldRe.png").similar(0.89))
    #wait(.5)
    #type(Key.TAB, KeyModifier.SHIFT)
    #wait(1)
    #type("calc")
    #wait(1)
    #type("o", KeyModifier.ALT)
    #wait(1)
    waitVanish(Pattern("RecentPlaces-1.png").similar(0.86))
    wait(1)
    type("s", KeyModifier.CTRL)
    wait(1)
    #assert exists(Pattern("ABdIIIEIICSl.png").similar(0.96))
    assert exists(Pattern("AttadwmentCS.png").similar(0.88))
    wait(1)
    click(Pattern("Viewattadwme.png").similar(0.96))
    wait(2)
    keyDown(Key.ALT)
    keyDown(Key.SPACE)
    type("x")
    keyUp(Key.ALT)
    keyUp(Key.SPACE)
    wait("FilePrintEma.png", 90)
    type(Key.F4, KeyModifier.ALT)
    waitVanish("FilePrintEma.png")
    rightClick(Pattern("1353448238790.png").similar(0.94))
    type("c")
    wait(Pattern("Doyouwanttou-1.png").similar(0.95))
    type("y")
    waitVanish(Pattern("Doyouwanttou-1.png").similar(0.95))
    onAppear(Pattern("Sources-1.png").similar(0.92), type(Key.ESC))
    rightClick(Pattern("1353448238790.png").similar(0.94))
    type("c")
    onAppear(Pattern("Doyouwanttou-1.png").similar(0.95), type("n"))
    waitVanish(Pattern("Doyouwanttou-1.png").similar(0.95))
    onAppear(Pattern("Sources-1.png").similar(0.92), type(Key.ESC))
    wait(.5)
           
    click(Pattern("Attadrnents-1.png").similar(0.95))
        #-----Section below tests and asserts bookmark and slip notes-----#
    assert exists(Pattern("1353440839554.png").similar(0.93))
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("k")      
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    assert exists(Pattern("1353440889797.png").similar(0.96))
    keyDown(Key.SHIFT)
    keyDown(Key.CTRL)
    type("k")      
    keyUp(Key.SHIFT)
    keyUp(Key.CTRL)
    wait(.5)
    click(Pattern("5.png").similar(0.97))
    wait(Pattern("SlibNotes.png").similar(0.94))
    paste("Slip Notes for Automation Testing")
    click(Pattern("1353441569472.png").similar(0.96))
    waitVanish(Pattern("SlibNotes.png").similar(0.94))
    assert exists(Pattern("1353441692757.png").similar(0.96))
   
        #-----Section below tests fields and negative exceptions-----#
    wait(.5)
    rightClick(Pattern("Extra.png").similar(0.94)) 
    wait(.5)
    assert exists(Pattern("CtrIZCtrIXCt.png").similar(0.91))
    type(Key.ESC)
    paste("ONLYTHISMUCHFITS")
    type("a", KeyModifier.CTRL)
    rightClick(Pattern("ENLYTHISMUCH.png").similar(0.93))
    wait(.5)
    assert exists(Pattern("CtrIZCtrIXCt-1.png").similar(0.92))
    type(Key.ESC)
    wait(.5)
    type(Key.TAB)
    type(Key.TAB)
    type("1111111")
    type(Key.TAB)
    onAppear("TheStartDate.png", type(Key.ENTER))
    wait(.5)
    paste("aaaaaa")
    type(Key.TAB)
    onAppear("TheStartDate.png", type(Key.ENTER))
    wait(.5)
    paste("!@#$%^")
    type(Key.TAB)
    onAppear("TheStartDate.png", type(Key.ENTER))
    wait(.5)
    paste("-111111")
    type(Key.TAB)
    onAppear("TheStartDate.png", type(Key.ENTER))
    wait(.5)
    type("t")
    type(Key.TAB)
    type(Key.TAB)
    wait(.5)
    paste("-111111")
    type(Key.TAB)
    onAppear(Pattern("TheHeldFrneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("aaaaaa")
    type(Key.TAB)
    onAppear(Pattern("TheHeldFrneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("111111")
    type(Key.TAB)
    onAppear(Pattern("TheEeldirneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("!@#$%^")
    type(Key.TAB)
    onAppear(Pattern("TheHeldFrneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("0:30:00")
    type(Key.TAB)
    wait(.5)
    assert exists(Pattern("03000.png").similar(0.94))
    wait(.5)
    paste("-111111")
    type(Key.TAB)
    onAppear(Pattern("TheHeldFrneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("aaaaaa")
    type(Key.TAB)
    onAppear(Pattern("TheHeldFrneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("111111")
    type(Key.TAB)
    onAppear(Pattern("TheEeldirneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("!@#$%^")
    type(Key.TAB)
    onAppear(Pattern("TheHeldFrneE.png").similar(0.94), type(Key.ENTER))
    wait(.5)
    paste("1:00:00")
    type(Key.TAB)
    wait(.5)
    assert exists(Pattern("10000.png").similar(0.97))
    wait(.5)
    type(Key.F4, KeyModifier.CTRL)
    onAppear("Doyouwantsav.png", type("y"))
    wait(.5)
    type("s", KeyModifier.CTRL)
    waitVanish(Pattern("1353450048570.png").similar(0.95))
    type("w", KeyModifier.CTRL)
    
    CreateCalendarEntry.create_calendar_entry()      
    wait(.5)
    type(Key.F4, KeyModifier.CTRL) #use with create calendar entry
                        
#ts_expanded_functions()